{"version":3,"file":"AdminDashboard-TSUZVXyq.js","sources":["../../src/components/ui/DragDropUpload.tsx","../../src/hooks/useSupabaseImage.ts","../../src/hooks/useSupabaseContent.ts","../../src/pages/AdminDashboard.tsx"],"sourcesContent":["import React, { useCallback, useState, type DragEvent } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface DragDropUploadProps {\n  onFileSelect: (file: File) => void;\n  accept?: string;\n  maxSize?: number;\n  title?: string;\n  description?: string;\n  variant?: 'default' | 'compact';\n  isLoading?: boolean;\n}\n\ninterface FileError {\n  type: 'size' | 'type';\n  message: string;\n}\n\nconst LoadingSpinner: React.FC = () => (\n  <motion.div\n    initial={{ opacity: 0 }}\n    animate={{ opacity: 1 }}\n    className=\"relative w-8 h-8\"\n  >\n    <motion.div\n      animate={{ rotate: 360 }}\n      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n      className=\"absolute inset-0 border-2 border-blue-500 dark:border-blue-400 rounded-full border-t-transparent\"\n    />\n  </motion.div>\n);\n\nconst UploadIcon: React.FC = () => (\n  <svg\n    className=\"w-6 h-6 text-gray-400 dark:text-gray-500 mb-2\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n    />\n  </svg>\n);\n\nconst DragIcon: React.FC = () => (\n  <motion.svg\n    initial={{ scale: 1 }}\n    animate={{ scale: [1, 1.1, 1] }}\n    transition={{ duration: 1.5, repeat: Infinity }}\n    className=\"w-8 h-8 text-blue-500 dark:text-blue-400 mb-2\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 4v16m0-16l-4 4m4-4l4 4\"\n    />\n  </motion.svg>\n);\n\nconst ErrorIcon: React.FC = () => (\n  <motion.svg\n    initial={{ scale: 0 }}\n    animate={{ scale: 1 }}\n    className=\"w-8 h-8 text-red-500 mb-2\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n    />\n  </motion.svg>\n);\n\nexport default function DragDropUpload({\n  onFileSelect,\n  accept = 'image/*',\n  maxSize = 5,\n  title = 'Upload File',\n  description = 'Drag and drop a file here, or click to select',\n  variant = 'default',\n  isLoading = false\n}: DragDropUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [error, setError] = useState<FileError | null>(null);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const validateFile = (file: File): FileError | null => {\n    if (file.size > maxSize * 1024 * 1024) {\n      return {\n        type: 'size',\n        message: `File size exceeds ${maxSize}MB limit`\n      };\n    }\n    \n    if (!accept.includes('*') && !accept.includes(file.type)) {\n      return {\n        type: 'type',\n        message: 'Invalid file type'\n      };\n    }\n\n    return null;\n  };\n\n  const handleDrop = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    setError(null);\n\n    if (isLoading) return;\n\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      const fileError = validateFile(file);\n      if (fileError) {\n        setError(fileError);\n        return;\n      }\n      onFileSelect(file);\n    }\n  }, [onFileSelect, maxSize, accept, isLoading]);\n\n  const handleDragOver = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (!isLoading) {\n      setIsDragging(true);\n      setError(null);\n    }\n  }, [isLoading]);\n\n  const handleDragLeave = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleClick = () => {\n    if (!isLoading) {\n      setError(null);\n      fileInputRef.current?.click();\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (isLoading) return;\n\n    const file = e.target.files?.[0];\n    if (file) {\n      const fileError = validateFile(file);\n      if (fileError) {\n        setError(fileError);\n        return;\n      }\n      onFileSelect(file);\n    }\n    // Reset the input value to allow uploading the same file again\n    e.target.value = '';\n  };\n\n  const isCompact = variant === 'compact';\n\n  return (\n    <motion.div\n      onClick={handleClick}\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      initial={{ opacity: 0 }}\n      animate={{ \n        opacity: 1,\n        borderColor: isDragging ? '#3B82F6' : error ? '#EF4444' : undefined,\n        scale: isDragging ? 1.02 : 1\n      }}\n      transition={{ duration: 0.2 }}\n      className={`\n        relative cursor-pointer\n        ${isCompact ? 'p-3' : 'p-6'}\n        rounded-lg border-2 border-dashed\n        ${isLoading ? 'cursor-wait ' : ''}\n        ${error \n          ? 'border-red-500 bg-red-50 dark:bg-red-900/20' \n          : isDragging\n            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n            : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'\n        }\n        transition-colors duration-200\n      `}\n    >\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={accept}\n        onChange={handleFileInputChange}\n        className=\"hidden\"\n        disabled={isLoading}\n      />\n      <AnimatePresence mode=\"wait\">\n        {isLoading ? (\n          <motion.div\n            key=\"loading\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"absolute inset-0 flex flex-col items-center justify-center bg-white/50 dark:bg-gray-800/50 rounded-lg backdrop-blur-sm\"\n          >\n            <LoadingSpinner />\n            <motion.div\n              initial={{ opacity: 0, y: 5 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-blue-500 dark:text-blue-400 font-medium mt-2\"\n            >\n              Uploading...\n            </motion.div>\n          </motion.div>\n        ) : error ? (\n          <motion.div\n            key=\"error\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50/50 dark:bg-red-900/30 rounded-lg backdrop-blur-sm\"\n          >\n            <ErrorIcon />\n            <motion.div\n              initial={{ opacity: 0, y: 5 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-red-500 dark:text-red-400 font-medium text-center\"\n            >\n              {error.message}\n              <p className=\"text-sm mt-1 text-red-400 dark:text-red-300\">\n                Click or drag a new file to try again\n              </p>\n            </motion.div>\n          </motion.div>\n        ) : isDragging ? (\n          <motion.div\n            key=\"dragging\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"absolute inset-0 flex flex-col items-center justify-center bg-blue-50/50 dark:bg-blue-900/30 rounded-lg backdrop-blur-sm\"\n          >\n            <DragIcon />\n            <motion.div\n              initial={{ opacity: 0, y: 5 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-blue-500 dark:text-blue-400 font-medium\"\n            >\n              Drop to upload\n            </motion.div>\n          </motion.div>\n        ) : (\n          <motion.div\n            key=\"normal\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className={`text-center ${isCompact ? 'space-y-1' : 'space-y-2'}`}\n          >\n            <div className=\"flex flex-col items-center\">\n              <UploadIcon />\n              <div className={`${isCompact ? 'text-sm' : 'text-base'} font-medium text-gray-900 dark:text-white`}>\n                {title}\n              </div>\n              <p className={`${isCompact ? 'text-xs' : 'text-sm'} text-gray-500 dark:text-gray-400`}>\n                {description}\n              </p>\n              <p className={`${isCompact ? 'text-xs' : 'text-sm'} text-gray-400 dark:text-gray-500`}>\n                Max size: {maxSize}MB\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}","import { useState } from 'react';\nimport { imageService, storageService } from '../services/supabaseService';\n\nexport const useSupabaseImage = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const addImage = async (id: string, base64Data: string, contentType: string = 'scanner'): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // For larger images (>1MB), use Supabase Storage\n      if (base64Data.length > 1000000) {\n        // Upload to Supabase Storage and get URL\n        const imageUrl = await storageService.uploadImage(id, base64Data);\n        \n        // Store the URL reference in Supabase\n        await imageService.addImage(id, imageUrl, contentType);\n      } else {\n        // For smaller images, store directly in Supabase\n        await imageService.addImage(id, base64Data, contentType);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getImage = async (id: string): Promise<string | undefined> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const data = await imageService.getImage(id);\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      return undefined;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteImage = async (id: string): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Get the image data first to check if it's a URL\n      const imageData = await imageService.getImage(id);\n      \n      // If it's a URL, delete from Storage as well\n      if (imageData && imageData.startsWith('https://')) {\n        await storageService.deleteImage(id);\n      }\n      \n      // Delete from Supabase\n      await imageService.deleteImage(id);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    addImage,\n    getImage,\n    deleteImage,\n    isLoading,\n    error\n  };\n};\n","import { useState, useEffect } from 'react';\nimport { contentService } from '../services/supabaseService';\nimport { useAuth } from '../contexts/AuthContext';\nimport type { ContentMetadata } from '../types';\n\nexport const useSupabaseContent = () => {\n  const { currentUser } = useAuth();\n  const [contents, setContents] = useState<ContentMetadata[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load contents from Supabase on mount\n  useEffect(() => {\n    const loadContents = async () => {\n      setIsLoading(true);\n      try {\n        const userId = currentUser?.username;\n        const data = await contentService.getContents(userId);\n        setContents(data);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n        setError(errorMessage);\n        console.error('[Supabase] Failed to load contents:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadContents();\n  }, [currentUser]);\n\n  // Save a single content item\n  const saveContent = async (content: ContentMetadata): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const userId = currentUser?.username;\n      await contentService.saveContent(content, userId);\n      \n      // Update local state\n      setContents(prev => {\n        const index = prev.findIndex(item => item.id === content.id);\n        if (index >= 0) {\n          const newContents = [...prev];\n          newContents[index] = content;\n          return newContents;\n        } else {\n          return [...prev, content];\n        }\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Delete a content item\n  const deleteContent = async (id: string): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      await contentService.deleteContent(id);\n      \n      // Update local state\n      setContents(prev => prev.filter(item => item.id !== id));\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save all contents\n  const saveAllContents = async (): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const userId = currentUser?.username;\n      await contentService.saveContents(contents, userId);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    contents,\n    setContents,\n    saveContent,\n    deleteContent,\n    saveAllContents,\n    isLoading,\n    error\n  };\n};\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { motion, Reorder, AnimatePresence } from 'framer-motion';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useToast } from '../components/ui/Toast';\nimport Button from '../components/ui/Button';\nimport DragDropUpload from '../components/ui/DragDropUpload';\nimport { TextField, TextArea, CheckboxField, SelectField } from '../components/ui/FormField';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { handleImageUpload, cleanupImageUrl } from '../utils/imageHandlers';\nimport { useQuestions } from '../hooks/useQuestions';\nimport { useSections } from '../hooks/useSections';\nimport { useSupabaseImage } from '../hooks/useSupabaseImage';\nimport { useSupabaseContent } from '../hooks/useSupabaseContent';\n\n// Types\ninterface ContentUploadState {\n  type: 'banner' | 'scanner';\n  progress: number;\n  error?: string;\n}\n\ninterface ContentMetadata {\n  id: string;\n  type: 'banner' | 'scanner' | 'template' | 'question';\n  title: string;\n  content: string;\n  imageId?: string;\n  scale?: number;\n  createdAt: number;\n  updatedAt: number;\n}\n\nconst AdminDashboard = () => {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8 text-gray-900 dark:text-white\">Admin Dashboard</h1>\n      <AdminDashboardContent />\n    </div>\n  );\n};\n\nconst AdminDashboardContent = () => {\n  const { currentUser } = useAuth();\n  const { showToast } = useToast();\n  const { theme } = useTheme();\n  const { addImage, getImage, deleteImage, isLoading: imageLoading } = useSupabaseImage();\n  const {\n    contents,\n    setContents,\n    saveContent,\n    deleteContent,\n    saveAllContents,\n    isLoading: contentLoading\n  } = useSupabaseContent();\n\n  const [contentUploading, setContentUploading] = useState<ContentUploadState | null>(null);\n\n  // Track loaded image data\n  const [bannerImageData, setBannerImageData] = useState<string | undefined>();\n  const [scannerImageData, setScannerImageData] = useState<Record<string, string>>({});\n\n  // Find banner and scanner images\n  const bannerImage = contents.find(item => item.type === 'banner');\n  const scannerImages = contents.filter(item => item.type === 'scanner')\n    .sort((a, b) => b.updatedAt - a.updatedAt);\n\n  // Load banner image from Firebase if needed\n  useEffect(() => {\n    if (bannerImage?.imageId && !bannerImageData) {\n      console.log('[Image Load] Loading banner image:', bannerImage.imageId);\n      getImage(bannerImage.imageId)\n        .then(data => {\n          if (data) {\n            console.log('[Image Load] Banner image loaded successfully');\n            setBannerImageData(data);\n          } else {\n            console.warn('[Image Load] Banner image not found in Supabase');\n          }\n        })\n        .catch(error => {\n          console.error('[Image Load] Failed to load banner image:', error);\n          showToast('error', 'Failed to load banner image');\n        });\n    }\n  }, [bannerImage?.imageId, bannerImageData, getImage, showToast]);\n\n  // Load scanner images from Firebase if needed\n  useEffect(() => {\n    scannerImages.forEach(image => {\n      if (image.imageId && !scannerImageData[image.imageId]) {\n        console.log('[Image Load] Loading scanner image:', image.imageId);\n        getImage(image.imageId)\n          .then(data => {\n            if (data) {\n              console.log('[Image Load] Scanner image loaded:', image.imageId);\n              setScannerImageData(prev => ({ ...prev, [image.imageId]: data }));\n            } else {\n              console.warn('[Image Load] Scanner image not found:', image.imageId);\n            }\n          })\n          .catch(error => {\n            console.error('[Image Load] Failed to load scanner image:', error);\n            showToast('error', 'Failed to load scanner image');\n          });\n      }\n    });\n  }, [scannerImages, scannerImageData, getImage, showToast]);\n\n  // Handle content upload\n  const handleContentUpload = async (type: 'banner' | 'scanner', file: File) => {\n    if (!file) return;\n\n    try {\n      setContentUploading({ type, progress: 0 });\n\n      // Process and store image\n      await new Promise<void>((resolve, reject) => {\n        handleImageUpload(file, async (imageUrl: string) => {\n          console.log('[Upload] Image processed successfully');\n          const imageId = `${type}-${Date.now()}`;\n\n          try {\n            // Store image data in Supabase\n            await addImage(imageId, imageUrl, type);\n            console.log('[Upload] Image stored in Supabase:', imageId);\n\n            // Create new content metadata\n            const newContent: ContentMetadata = {\n              id: crypto.randomUUID(),\n              type,\n              title: file.name,\n              content: '',\n              imageId,\n              scale: 1,\n              createdAt: Date.now(),\n              updatedAt: Date.now()\n            };\n\n            // If it's a banner, delete the old one\n            if (type === 'banner' && bannerImage) {\n              await deleteContent(bannerImage.id);\n              if (bannerImage.imageId) {\n                await deleteImage(bannerImage.imageId);\n              }\n            }\n\n            // Save the new content to Supabase\n            await saveContent(newContent);\n\n            // Load the new image data\n            if (type === 'banner') {\n              setBannerImageData(imageUrl);\n            } else {\n              setScannerImageData(prev => ({ ...prev, [imageId]: imageUrl }));\n            }\n\n            resolve();\n          } catch (error) {\n            console.error('[Upload] Failed to store content:', error);\n            reject(error);\n          }\n        });\n      });\n\n      showToast('success', `${type === 'banner' ? 'Banner' : 'Scanner'} image uploaded successfully`);\n    } catch (error) {\n      console.error('[Upload] Content upload failed:', error);\n      setContentUploading(prev => prev ? { ...prev, error: 'Upload failed' } : null);\n      showToast('error', 'Failed to upload content');\n    } finally {\n      setContentUploading(null);\n    }\n  };\n\n  // Handle content deletion\n  const handleContentDelete = async (id: string, type: string) => {\n    try {\n      console.log('[Delete] Deleting content:', { id, type });\n      const content = contents.find(item => item.id === id);\n\n      if (content?.imageId) {\n        await deleteImage(content.imageId);\n        console.log('[Delete] Image deleted from Supabase:', content.imageId);\n\n        // Clear image data from state\n        if (content.type === 'banner') {\n          setBannerImageData(undefined);\n        } else {\n          setScannerImageData(prev => {\n            const { [content.imageId]: removed, ...rest } = prev;\n            return rest;\n          });\n        }\n      }\n\n      // Delete content from Supabase\n      await deleteContent(id);\n      showToast('success', 'Content deleted successfully');\n    } catch (error) {\n      console.error('[Delete] Failed to delete content:', error);\n      showToast('error', 'Failed to delete content');\n    }\n  };\n\n  // Handle scale changes\n  const handleScaleChange = async (content: ContentMetadata, newScale: number) => {\n    console.log('[Scale] Updating scale:', { id: content.id, scale: newScale });\n\n    try {\n      const updatedContent = { ...content, scale: newScale, updatedAt: Date.now() };\n      await saveContent(updatedContent);\n      showToast('success', 'Scale updated successfully');\n    } catch (error) {\n      console.error('[Scale] Failed to save scale update:', error);\n      showToast('error', 'Failed to save scale change');\n    }\n  };\n\n  if (!currentUser?.isOwner) {\n    return <div className=\"p-8 text-center text-gray-900 dark:text-white\">\n      You don't have permission to access this page.\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Banner Image Section */}\n      <section className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Banner Image</h2>\n        <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n          The banner image appears at the top of the main page and sets the tone for your scanner template. Upload an eye-catching image here.\n        </p>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <DragDropUpload\n              onFileSelect={(file) => handleContentUpload('banner', file)}\n              accept=\"image/*\"\n              maxSize={5 * 1024 * 1024} // 5MB\n              loading={contentUploading?.type === 'banner'}\n              label=\"Drag & drop a banner image or click to browse\"\n            />\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200\">Current Banner</h3>\n            {bannerImage && bannerImageData ? (\n              <div className=\"relative group\">\n                <img\n                  src={bannerImageData}\n                  alt=\"Banner\"\n                  className=\"w-full h-auto rounded-lg border border-gray-200 dark:border-gray-700\"\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 rounded-lg flex items-center justify-center\">\n                  <button\n                    onClick={() => handleContentDelete(bannerImage.id, 'banner')}\n                    className=\"bg-red-600 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                    aria-label=\"Delete banner\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </div>\n                {bannerImage.scale !== undefined && (\n                  <div className=\"mt-2\">\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Scale: {bannerImage.scale.toFixed(1)}\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"0.5\"\n                      max=\"2\"\n                      step=\"0.1\"\n                      value={bannerImage.scale}\n                      onChange={(e) => handleScaleChange(bannerImage, parseFloat(e.target.value))}\n                      className=\"w-full\"\n                    />\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"border border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center text-gray-500 dark:text-gray-400\">\n                No banner image uploaded\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Scanner Images Section */}\n      <section className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Scanner Variations</h2>\n        <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n          A scanner's data can be visualized in a variety of ways. Upload different scanner variation images to display on the main page.\n        </p>\n\n        <div className=\"mb-6\">\n          <DragDropUpload\n            onFileSelect={(file) => handleContentUpload('scanner', file)}\n            accept=\"image/*\"\n            maxSize={5 * 1024 * 1024} // 5MB\n            loading={contentUploading?.type === 'scanner'}\n            label=\"Drag & drop a scanner image or click to browse\"\n          />\n        </div>\n\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200\">Current Scanner Images</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n          {scannerImages.map((image) => (\n            <div key={image.id} className=\"relative group bg-gray-50 dark:bg-gray-700 p-3 rounded-lg\">\n              {scannerImageData[image.imageId] ? (\n                <>\n                  <div className=\"relative aspect-square overflow-hidden rounded-lg mb-2\">\n                    <img\n                      src={scannerImageData[image.imageId]}\n                      alt={image.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center\">\n                      <button\n                        onClick={() => handleContentDelete(image.id, 'scanner')}\n                        className=\"bg-red-600 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                        aria-label=\"Delete scanner image\"\n                      >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300 truncate mb-1\">{image.title}</div>\n                  {image.scale !== undefined && (\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-600 dark:text-gray-400 mb-1\">\n                        Scale: {image.scale.toFixed(1)}\n                      </label>\n                      <input\n                        type=\"range\"\n                        min=\"0.5\"\n                        max=\"2\"\n                        step=\"0.1\"\n                        value={image.scale}\n                        onChange={(e) => handleScaleChange(image, parseFloat(e.target.value))}\n                        className=\"w-full\"\n                      />\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n                </div>\n              )}\n            </div>\n          ))}\n\n          {scannerImages.length === 0 && (\n            <div className=\"col-span-full border border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center text-gray-500 dark:text-gray-400\">\n              No scanner images uploaded\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"],"names":["LoadingSpinner","jsx","motion","UploadIcon","DragIcon","ErrorIcon","DragDropUpload","onFileSelect","accept","maxSize","title","description","variant","isLoading","isDragging","setIsDragging","useState","error","setError","fileInputRef","React","validateFile","file","handleDrop","useCallback","e","fileError","handleDragOver","handleDragLeave","handleClick","_a","handleFileInputChange","isCompact","jsxs","AnimatePresence","useSupabaseImage","setIsLoading","id","base64Data","contentType","imageUrl","storageService","imageService","err","errorMessage","imageData","useSupabaseContent","currentUser","useAuth","contents","setContents","useEffect","userId","data","contentService","content","prev","index","item","newContents","AdminDashboard","AdminDashboardContent","showToast","useToast","theme","useTheme","addImage","getImage","deleteImage","saveContent","deleteContent","contentUploading","setContentUploading","bannerImageData","setBannerImageData","scannerImageData","setScannerImageData","bannerImage","scannerImages","b","image","handleContentUpload","type","resolve","reject","handleImageUpload","imageId","newContent","handleContentDelete","removed","rest","handleScaleChange","newScale","updatedContent","Fragment"],"mappings":"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"}