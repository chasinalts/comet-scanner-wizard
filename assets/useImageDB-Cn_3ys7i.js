import{K as c}from"./vendor-other-B8UD1HAJ.js";const s="ImageStore",t="images",l=1;let n=null;const d=async()=>(n||(n=c(s,l,{upgrade(r){r.objectStoreNames.contains(t)||(r.createObjectStore(t),console.log(`[IndexedDB] Object store "${t}" created.`))}}),console.log("[IndexedDB] Database connection initialized.")),n),m=()=>({addImage:async(e,o)=>{try{await(await d()).put(t,o,e),console.log(`[IndexedDB] Image added/updated with ID: ${e}`)}catch(a){throw console.error(`[IndexedDB] Failed to add/update image ${e}:`,a),a}},getImage:async e=>{try{const a=await(await d()).get(t,e);return console.log(`[IndexedDB] Image retrieved for ID: ${e}, Data found: ${!!a}`),a}catch(o){console.error(`[IndexedDB] Failed to get image ${e}:`,o);return}},deleteImage:async e=>{try{await(await d()).delete(t,e),console.log(`[IndexedDB] Image deleted with ID: ${e}`)}catch(o){console.error(`[IndexedDB] Failed to delete image ${e}:`,o)}},clearStore:async()=>{try{await(await d()).clear(t),console.log(`[IndexedDB] Store "${t}" cleared.`)}catch(e){console.error(`[IndexedDB] Failed to clear store "${t}":`,e)}}});d().catch(r=>console.error("[IndexedDB] Failed to initialize database:",r));export{m as useImageDB};
